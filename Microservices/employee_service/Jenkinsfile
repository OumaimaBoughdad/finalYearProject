pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9' // Ensure this matches the Maven version configured in Jenkins
    }

    environment {
        APP_NAME = "employee_service"
        RELEASE = "latest"
        DOCKER_USER = "oumaimaboughdad" // Your Docker Hub username
        DOCKER_PASS = credentials('docker-credentials') // Use Jenkins credentials for Docker Hub
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "latest"
    }

    triggers {
        githubPush() // Trigger the pipeline when a GitHub webhook is received
    }

    stages {
        stage('Check Changes') {
            steps {
                script {
                    // Check if changes were made in the 'employee_service' folder
                    def changes = checkout scm
                    if (!changes.changeSets.any { it.items.any { it.path.startsWith('Microservices/employee_service/') } }) {
                        echo 'No changes in the employee_service folder. Skipping pipeline.'
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }
        }

        stage('Checkout SCM') {
            steps {
                checkout scm // Checkout the code from the SCM (e.g., Git)
            }
        }

        stage('Build') {
            steps {
                echo 'Building the employee microservice ......'
                dir('Microservices/employee_service') { // Change to the directory containing pom.xml
                    sh 'mvn clean package -DskipTests' // Build the Maven project
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonar-token-for-jenkins') { // Use SonarQube credentials
                        dir('Microservices/employee_service') { // Ensure analysis is run in the correct directory
                            sh 'mvn sonar:sonar' // Run SonarQube analysis
                        }
                    }
                }
            }
        }

        // Uncomment this stage if you want to enforce the quality gate
        // stage('Quality Gate') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token-for-jenkins' // Enforce quality gate
        //         }
        //     }
        // }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        dir('Microservices/employee_service') { // Ensure Docker build is run in the correct directory
                            sh '''
                                docker login -u $DOCKER_USER -p $DOCKER_PASS
                                docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                                docker push ${IMAGE_NAME}:${IMAGE_TAG}
                            '''
                        }
                    }
                }
            }
        }
    }
}
