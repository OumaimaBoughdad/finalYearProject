pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9' // Ensure this matches the Maven version configured in Jenkins
    }

    environment {
        APP_NAME = "employee-service"
        RELEASE = "latest"
        DOCKER_USER = "oumaimaboughdad" // Your Docker Hub username
        DOCKER_PASS = credentials('docker-credentials') // Use Jenkins credentials for Docker Hub
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "latest"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm // Checkout the code from the SCM (e.g., Git)
            }
        }

        stage('Build') {
            steps {
                echo 'Building the employee microservice ......'
                dir('Microservices/employee_service') { // Change to the directory containing pom.xml
                    sh 'mvn clean package -DskipTests' // Build the Maven project
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonar-token-for-jenkins') { // Use SonarQube credentials
                        dir('Microservices/employee_service') { // Ensure analysis is run in the correct directory
                            sh 'mvn sonar:sonar' // Run SonarQube analysis
                        }
                    }
                }
            }
        }

        // Uncomment this stage if you want to enforce the quality gate
        // stage('Quality Gate') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token-for-jenkins' // Enforce quality gate
        //         }
        //     }
        // }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    dir('Microservices/employee_service') { // Change to the directory containing the Dockerfile
                        docker.withRegistry('https://registry.hub.docker.com', env.DOCKER_PASS) { // Use Docker Hub registry
                            // Build Docker image
                            docker_image = docker.build("${IMAGE_NAME}")
                            
                            // Push Docker image with the specified tag and 'latest'
                            docker_image.push("${IMAGE_TAG}")
                            docker_image.push('latest')
                        }
                    }
                }
            }
        }
    }
}
