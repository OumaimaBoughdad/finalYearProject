pipeline {
    agent { label 'jenkins-agent' }

    tools {
        maven 'Maven 3.9.9' // Ensure this matches the Maven version configured in Jenkins
    }
     environment {
        APP_NAME = "employee-service"
        RELEASE = "latest"
        DOCKER_USER = "oumaimaboughdad"
        DOCKER_PASS = 'token-for-the-jenkins'
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "latest"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Building the employee microservice ......  '
                dir('Microservices/employee_service') { // Change to the directory containing pom.xml
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonar-token-for-jenkins') {
                        dir('Microservices/employee_service') { // Ensure analysis is run in the correct directory
                            sh 'mvn sonar:sonar'
                        }
                    }
                }
            }
        }

        // Uncomment this stage if you want to enforce the quality gate
        // stage('Quality Gate') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token-for-jenkins'
        //         }
        //     }
        // }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    dir('Microservices/employee_service') { // Change to the directory containing the Dockerfile
                        docker.withRegistry('', DOCKER_PASS) {
                            // Build Docker image
                            docker_image = docker.build("${IMAGE_NAME}")
                            
                            // Push Docker image with the specified tag and 'latest'
                            docker_image.push("${IMAGE_TAG}")
                            docker_image.push('latest')
                        }
                    }
                }
            }
        }
        stage("Trivy Scan") {
           steps {
               script {
	            sh ('docker run -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image oumaimaboughdad/employee-service:latest --no-progress --scanners vuln  --exit-code 0 --severity HIGH,CRITICAL --format table')
               }
           }
       
    }
}
