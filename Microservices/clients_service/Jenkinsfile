pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9' // Ensure this matches the Maven version configured in Jenkins
        dockerTool 'Docker' // Use the Docker tool configured in Jenkins
    }

    environment {
        DOCKER_HUB_TOKEN = credentials('docker-hub-token') // Use the token-based credentials
        DOCKER_IMAGE_NAME = 'oumaimaboughdad/clients-service' // Replace with your Docker Hub username and image name
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                echo 'Building the microservice...'
                dir('Microservices/clients_service') { // Change to the directory containing pom.xml
                    sh 'mvn clean package -DskipTests' // Skip tests during the build
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('Sonar-7') { // Use the name configured in Jenkins
                    dir('Microservices/clients_service') { // Specify the directory where the pom.xml is located
                        sh '''
                        mvn sonar:sonar \
                            -Dsonar.host.url=http://16.170.223.44:9000/ \
                            -Dsonar.login=squ_1ae4f5b6d10ad27965eb511624faa9f2da2dc9fc \
                            -Dsonar.projectKey=Prj-Fin-T
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    // Build the Docker image
                    docker.build("${env.DOCKER_IMAGE_NAME}:latest", 'Microservices/clients_service')
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    // Log in to Docker Hub using the token
                    docker.withRegistry('https://registry.hub.docker.com', env.DOCKER_HUB_TOKEN) {
                        // Push the Docker image
                        docker.image("${env.DOCKER_IMAGE_NAME}:latest").push()
                    }
                }
            }
        }
    }
}  
