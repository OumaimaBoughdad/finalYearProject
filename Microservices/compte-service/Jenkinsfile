pipeline {
    agent any

    tools {
        maven 'Maven 3.9.9' // Ensure this matches the Maven version configured in Jenkins
    }

    environment {
        APP_NAME = "compte-service" // Name of the microservice
        RELEASE = "latest" // Release tag
        DOCKER_USER = "oumaimaboughdad" // Your Docker Hub username (optional, if you still want to push to Docker Hub)
        DOCKER_PASS = credentials('docker-credentials') // Use Jenkins credentials for Docker Hub (optional)
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}" // Docker Hub image name (optional)
        IMAGE_TAG = "latest" // Docker image tag
        AWS_ACCOUNT_ID = "324037283952" // Your AWS account ID
        AWS_REGION = "eu-west-3" // AWS region for ECR
        ECR_REPO_NAME = "${APP_NAME}" // ECR repository name (same as microservice name)
        ECR_IMAGE_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}:${IMAGE_TAG}" // ECR image URI
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm // Checkout the code from the SCM (e.g., Git)
            }
        }

        stage('Build') {
            steps {
                echo 'Building the compte-service microservice ......'
                dir('Microservices/compte-service') { // Change to the directory containing pom.xml
                    sh 'mvn clean package -DskipTests' // Build the Maven project
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonar-token-for-jenkins') { // Use SonarQube credentials
                        dir('Microservices/compte-service') { // Ensure analysis is run in the correct directory
                            sh 'mvn sonar:sonar' // Run SonarQube analysis
                        }
                    }
                }
            }
        }

        // Uncomment this stage if you want to enforce the quality gate
        // stage('Quality Gate') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token-for-jenkins' // Enforce quality gate
        //         }
        //     }
        // }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('Microservices/compte-service') { // Ensure Docker build is run in the correct directory
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ." // Build Docker image for Docker Hub (optional)
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ECR_IMAGE_URI}" // Retag the image for ECR
                    }
                }
            }
        }

        stage('Login to ECR') {
            steps {
                script {
                    // Authenticate Docker with ECR
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                }
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                script {
                    dir('Microservices/compte-service') { // Ensure Docker push is run in the correct directory
                        sh "docker push ${ECR_IMAGE_URI}" // Push the Docker image to ECR
                    }
                }
            }
        }

        // Optional: Push to Docker Hub (if you still want to push to Docker Hub)
        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        dir('Microservices/compte-service') { // Ensure Docker push is run in the correct directory
                            sh '''
                                docker login -u $DOCKER_USER -p $DOCKER_PASS
                                docker push ${IMAGE_NAME}:${IMAGE_TAG}
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}