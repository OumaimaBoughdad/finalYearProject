pipeline {
    agent { label 'jenkins-agent' }

    tools {
        nodejs 'NodeJS 18' // Ensure Node.js version is correctly installed on the agent
    }

    environment {
        APP_NAME = "front-app"
        DOCKER_USER = "oumaimaboughdad"
        DOCKER_PASS = credentials('token-for-the-jenkins') // Reference to Jenkins credential ID
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "latest"
    }

    stages {

        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('frontend') { // Navigate to the Angular project directory
                    sh 'npm install'
                }
            }
        }

        stage('Build') {
            steps {
                dir('frontend') {
                    sh 'ng build --prod'
                }
            }
        }

        stage('Test') {
            steps {
                dir('frontend') {
                    sh 'ng test --watch=false' // Run unit tests
                    // Optionally run end-to-end tests
                    // sh 'ng e2e'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // Ensure SonarQube server is configured in Jenkins
                    dir('frontend') {
                        sh 'npm run sonar' // Ensure 'sonar' script is defined in package.json
                    }
                }
            }
        }

        stage('Cleanup Docker Image') {
            steps {
                script {
                    sh """
                        docker logout
                        docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
                        if docker images -q ${IMAGE_NAME}:${IMAGE_TAG} 2>/dev/null; then
                            docker rmi -f ${IMAGE_NAME}:${IMAGE_TAG}
                        fi
                    """
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                dir('frontend') {
                    script {
                        docker.withRegistry("", "${DOCKER_PASS}") {
                            def dockerImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "-f Dockerfile .")
                            dockerImage.push()
                        }
                    }
                }
            }
        }

        //stage('Deploy to Kubernetes') {
         //   steps {
              //  withCredentials([file(credentialsId: 'kubeconfig-id', variable: 'KUBECONFIG')]) { // Reference to Jenkins credential ID for kubeconfig
                  //  sh 'export KUBECONFIG=$KUBECONFIG'
                  //  sh 'kubectl apply -f k8s/deployment.yaml -f k8s/service.yaml' // Adjust paths as necessary
                   // sh "kubectl set image deployment/${APP_NAME} ${APP_NAME}=${IMAGE_NAME}:${IMAGE_TAG}"
               // }
           // }
        //}
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
