pipeline {
    agent any

    tools {
        nodejs 'NodeJS 18' // Ensure this matches the Node.js version configured in Jenkins
    }

    environment {
        APP_NAME = "front-app"
        DOCKER_USER = "oumaimaboughdad"
        DOCKER_PASS = credentials('docker-credentials') // Reference to Jenkins credential ID
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
        IMAGE_TAG = "latest"
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Check Node.js and npm Versions') {
            steps {
                sh 'node --version'
                sh 'npm --version'
            }
        }

        stage('Install Angular CLI') {
            steps {
                sh 'npm install -g @angular/cli' // Install Angular CLI globally
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('frontend/front') {
                    sh 'npm install'
                }
            }
        }

        stage('Build Angular App') {
            steps {
                dir('frontend/front') {
                    sh 'npm run build -- --configuration production' // Use production configuration
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('frontend/front') {
                    script {
                        // Build the Docker image
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using the DOCKER_PASS variable
                    sh "docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}"
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
